import random
import math
import numpy as np
import ROOT
ROOT.gROOT.SetBatch(True)

def makeBranch(tree, name, t):
    b = None
    if t == "vector":
        b = ROOT.vector('double')()
        tree.Branch(name, b)
    elif t == "D":
        b = np.zeros(1, dtype=float)
        tree.Branch(name, b, name+"/"+t)
    return b    

 
def rand(m=0,M=100):
    a = random.uniform(m,M) 
    return a

def find_nearest(array,value):
    idx = np.searchsorted(array, value, side="left")
    if idx > 0 and (idx == len(array) or math.fabs(value - array[idx-1]) < math.fabs(value - array[idx])):
        return array [idx-1], idx-1
    else:
        return array [idx], idx

def getDistanceToSquareCenter(x, square_size):
    return abs(x- square_size / 2.0)

def getADCForBinary(square_size, x):
    h = 1.0
    f = 10.0

    if abs(x) <= square_size / 2.0:
        return f * h
    else:
        return 0.0
    
def getADCForSquare(square_size, x):
    h = 1.0
    f = 10.0
    d = None
    if x < -square_size / 2.0:
        d = 0
    elif -square_size / 2.0 <= x and x <= square_size / 2.0:
        d = h
    elif square_size / 2.0 < x:
        d = 0
    return f * d

    
def fullGeo(square_size):
    info = {}
    info["square_size"] = square_size
    info["nchannel"] = 32
    info["xmidloc"] = np.arange(-(info["nchannel"]) * info["square_size"] / 2.0, 
                               (info["nchannel"]) * info["square_size"] / 2.0 + info["square_size"], 
                               info["square_size"]).tolist()
    info["xmidloc2"] = np.arange(-(info["nchannel"]) * info["square_size"] / 2.0 - info["square_size"] / 2.0, 
                                 (info["nchannel"]) * info["square_size"] / 2.0 + info["square_size"] / 2.0, 
                                 info["square_size"]).tolist()
    return info

def main():
    nEvents = 10000
    nBins = 1000
    low = -10.0
    high = 10
    square_size = 40/32
    outfile = "hodoScopeData.root"

    root_file = ROOT.TFile(outfile, "RECREATE")
    tree = ROOT.TTree("tree", "tree")
    amp1_ = makeBranch(tree, "amp1", "vector")
    amp2_ = makeBranch(tree, "amp2", "vector")
    xtruth_ = makeBranch(tree, "xtruth", "D")


    geo = fullGeo(square_size)
    print(geo)

    for i in range(nEvents):
        xtruth = rand(low,high)

        maxChannelX1, maxChannelIdx1 = find_nearest(geo["xmidloc"], xtruth)
        ampBinary = [-10.0]*len(geo["xmidloc"])
        ampTri1 = [-10.0]*len(geo["xmidloc"])
        for i in range(len(geo["xmidloc"])):
            if i == maxChannelIdx1:
                localX1 = xtruth - geo["xmidloc"][i]
                ampBinary[i] = getADCForBinary(square_size, localX1)
                ampTri1[i] = getADCForSquare(square_size, localX1)
            else:
                ampBinary[i] = 0.0
                ampTri1[i] = 0.0
        ampMaxBinary = max(ampBinary)
        ampMaxTri1 = max(ampTri1)

        maxChannelX2, maxChannelIdx2 = find_nearest(geo["xmidloc2"], xtruth)
        ampTri2 = [-10.0]*len(geo["xmidloc2"])
        for i in range(len(geo["xmidloc2"])):
            if i == maxChannelIdx2:
                localX2 = xtruth - geo["xmidloc2"][i]
                ampTri2[i] = getADCForSquare(square_size, localX2)
            else:
                ampTri2[i] = 0.0

        ampMaxTri2 = max(ampTri2)

        xreco = maxChannelX1
        xrecoTriangle = maxChannelX1



        xtruth_[0] = xtruth
        for x in ampTri1:
            amp1_.push_back(x)
        for x in ampTri2:
            amp2_.push_back(x)

        tree.Fill()
        amp1_.clear()
        amp2_.clear()



    root_file.Write()
    tree.Write()
    root_file.Close()

if __name__ == '__main__':
    main()





